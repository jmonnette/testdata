{
  "prompts": [
    {
      "id": "f717db01-f093-4999-9680-b70fbf21e4c0",
      "name": "Test Data Generator",
      "description": "Generates a Python script to generate a JSON test data set based on an example JSON object",
      "content": "Using the JSON object as a template, generate Python3 code that creates an array of JSON objects with different values.\n\nThe number of objects to include in the array is specified via a command-line parameter called numObjects.\n\nThe Python code should use the Faker library to generate realistic data.\nUse the JSON field names to infer the type of data to generate.\nYou can also infer business rules about the data from the field names.\nUnless specifically stated, the values for all fields should be randomly generated (i.e., there should be no hardcoded values unless specifically stated)\n\nFor array fields, the digits in parentheses in the field name indicate the range of array sizes to generate.\nFor example, \"(1,3)\" indicates that there should be 1 to 3 objects in the generated array.\nAlways exclude this parenthetical from the field name in the generated output JSON.\n\nFor date fields, the dates in parentheses in the field name indicate the valid date range for the field.\nFor example, \"(2002-01-01,2003-06-30)\" indicates that the date must be between January 1, 2002 and June 30, 2003.\nAlways exclude this parenthetical from the field name in the generated output JSON.\nAlso, you should do your best to infer the implied order of dates based on the field names and generate dates according to the implied order.\nFor example, a field called start should be earlier than a field called end.  A field called opened should be earlier than a field called closed.\n\nFor text fields, the values in parentheses indicate the set of valid values for the field.\nYou should choose only from these values when generating the data for the field.\nAlways exclude this parenthetical from the field name in the generated output JSON.\n\nIf the field name contains square brackets, \"[]\", the value between the square brackets indicates the data type for the field.\nMake sure that the generated value matches the data type when specified.  If not specified, then infer the data type from the example value and the field name.\nAlways exclude the brackets and bracketed text from the field name in the output.\n\nRemember, the part of the parentheticals in the template JSON field names in parentheses are not to be included in the JSON output.\nRemember, the brackets and bracketed text in the field names are not to be included in the JSON output.\nRemember also to make sure there are no hardcoded values in the output JSON unless specifically asked for.\n\n{{Additional Description}}\n\nThe Python code should write the JSON to a file called {{Output File Name}}.\n\nJSON:\n\n{{JSON Example}}"
    }
  ],
  "folders": []
}